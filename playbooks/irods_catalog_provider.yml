---
- name: Enable test effects
  hosts: all
  tasks:
    - name: Initialize facts
      ansible.builtin.set_fact:
        _notifications_enabled: false
        _test_log: true

    - name: Enable notifications when not testing
      ansible.builtin.set_fact:
        _notifications_enabled: true
        _test_log: false
      tags:
        - no_testing

- name: Allow catalog service providers to talk to DBMS
  hosts: dbms
  become: true
  gather_facts: false
  tasks:
    - name: Allow communication with Postgres DBMS
      ansible.builtin.blockinfile:
        path: "{{ _irods_dbms_pg_hba }}"
        marker: "# {mark} DS IRODS MANAGED BLOCK"
        block: |
          {% for i in groups['irods_catalog'] %}
          {%   set addr = i if i | ansible.utils.ipaddr else lookup('dig', i) %}
          {{ '%-7s %-15s %-15s %-23s %s'
            | format('host', 'ICAT', hostvars[i]._irods_db_user, addr ~ '/32', 'md5') }}
          {% endfor %}
      notify:
        - Reload postgresql
      tags:
        - postgres

  handlers:
    - name: Reload postgresql
      when: _notifications_enabled
      ansible.builtin.service:
        name: postgresql
        state: reloaded

- name: Provision catalog service provider
  ansible.builtin.import_playbook: irods_provision.yml

- name: Provision additional for catalog service providers
  hosts: irods_catalog
  become: true
  gather_facts: false
  tasks:
    - name: Configure linux kernel
      ansible.posix.sysctl:
        name: kernel.{{ item.name }}
        value: "{{ item.value }}"
      with_items: "{{ _irods_sysctl_kernel }}"
      tags:
        - no_testing

    - name: Ensure parallel is installed
      ansible.builtin.package:
        name: parallel
        state: present

    - name: Ensure pika installed
      ansible.builtin.pip:
        name: pika>=1.2
        state: present

    - name: Provision CentOS
      when: ansible_distribution == 'CentOS'
      block:
        - name: CentOS | install mail client
          ansible.builtin.package:
            name: mailx
            state: present

        - name: CentOS | install PostgreSQL 12 repository
          ansible.builtin.yum:
            name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm

        - name: CentOS | install PostgreSQL 12 clients are installed
          ansible.builtin.package:
            name:
              - postgresql12
              - postgresql12-odbc
            state: present

        - name: CentOS | add postgres 12 clients to path
          ansible.builtin.copy:
            src: "{{ item }}"
            dest: /etc/profile.d
            mode: a+r
          with_fileglob:
            - "files/irods/etc/profile.d/*"

        - name: CentOS | define PostgreSQL 12 ODBC Driver
          ansible.builtin.shell:
            executable: /bin/bash
            stdin: "{{ lookup('file', 'files/irods/postgresql-odbc-tmpl.ini') }}"
            cmd: |
              if driverDef="$(odbcinst -q -d -n PostgreSQL)"; then
                description="$(sed --quiet 's/^Description=//p' <<< "$driverDef")"
                driver="$(sed --quiet 's/^Driver=//p' <<< "$driverDef")"
                setup="$(sed --quiet 's/^Setup=//p' <<< "$driverDef")"
                if [[ "$description" == 'PostgreSQL 12 ODBC Driver' \
                  && "$driver" == '/usr/pgsql-12/lib/psqlodbc.so' \
                  && "$setup" == '/usr/pgsql-12/lib/psqlodbcw.so' ]]
                then
                  exit 0
                fi
                if ! odbcinst -i -d -r -v; then
                  exit 1
                fi
                echo changed
              fi
          register: result
          changed_when: result.stdout == 'changed'

        - name: CentOS | Lock irods-database-plugin-postgres to required version
          community.general.yum_versionlock:
            name: irods-database-plugin-postgres-{{ _irods_version }}
            state: present
# XXX - Due to https://github.com/ansible-collections/community.general/issues/4470, this isn't
# idempotent.
          tags: non_idempotent
# XXX - ^^^

    - name: Provision Ubuntu
      when: ansible_distribution == 'Ubuntu'
      block:
        - name: Ubuntu | install mail client
          ansible.builtin.package:
            name: bsd-mailx
            state: present

        - name: Ubuntu | add PostgreSQL repository key
          ansible.builtin.apt_key:
            url: https://www.postgresql.org/media/keys/ACCC4CF8.asc

        - name: Ubuntu | install PostgreSQL repository
          ansible.builtin.copy:
            dest: /etc/apt/sources.list.d/pgdg.list
            mode: u+rw
            content: >
              deb http://apt-archive.postgresql.org/pub/repos/apt/ {{ ansible_lsb.codename }}-pgdg
              main

        - name: Ubuntu | install PostgreSQL 12 clients
          ansible.builtin.apt:
            update_cache: true
            name:
              - odbc-postgresql
              - postgresql-client-12
            state: present

    - name: Install irods server packages
      ansible.builtin.package:
        name: irods-database-plugin-postgres
        state: present

    - name: Install plugins
      ansible.builtin.import_tasks: tasks/irods/install_plugins.yml

    - name: Ensure iRODS ownership
      ansible.builtin.import_tasks: tasks/irods/ensure_irods_ownership.yml

- name: Configure iRODS on catalog service providers
  hosts: irods_catalog
  become: "{{ _irods_become_svc_acnt }}"
  become_user: "{{ _irods_service_account_name }}"
  become_flags: "-i"
  gather_facts: false
  tasks:
    - name: Set up iRODS
      ansible.builtin.include_role:
        name: cyverse.ds.irods_cfg
        tasks_from: setup_irods.yml
      vars:
        irods_cfg_catalog_provider_hosts:
          - "{{ inventory_hostname }}"
        irods_cfg_client_server_policy: "{{ _irods_client_server_policy }}"
        irods_cfg_cmd_scripts:
          - files/irods/var/lib/irods/msiExecCmd_bin/*
        irods_cfg_database:
          db_host: "{{ _irods_dbms_host }}"
          db_odbc_driver: "{{ _irods_odbc_driver }}"
          db_password: "{{ _irods_db_password }}"
          db_port: "{{ _irods_dbms_port }}"
          db_username': "{{ _irods_db_user }}"
        irods_cfg_database_user_password_salt: "{{ _irods_user_password_salt }}"
        irods_cfg_default_dir_mode: "{{ _irods_default_dir_mode }}"
        irods_cfg_default_file_mode: "{{ _irods_default_file_mode }}"
        irods_cfg_default_hash_scheme: "{{ _irods_default_hash_scheme }}"
        irods_cfg_default_number_of_transfer_threads: >-
          {{ _irods_default_number_of_transfer_threads }}
        irods_cfg_default_resource_directory: "{{ _irods_default_vault }}"
        irods_cfg_default_resource_name: "{{ _irods_default_resource }}"
        irods_cfg_environment_variables:
          IRODS_AMQP_URI: >-
            amqp://{{ _irods_amqp_username }}:{{ _irods_amqp_password }}@{{ _irods_amqp_host }}:{{ _irods_amqp_port }}/{{ _irods_amqp_vhost | replace('/', '%2F') }}
        irods_cfg_federation: "{{ _irods_federation }}"
        irods_cfg_host_entries: >-
          {{ [] if _irods_host_aliases | count == 0 else
            [
              {
                'address_type': 'local',
                'addresses': [inventory_hostname] + _irods_host_aliases
              }
            ] }}
        irods_cfg_negotiation_key: "{{ _irods_negotiation_key }}"
        irods_cfg_number_of_concurrent_delay_rule_executors: "{{ _irods_max_num_re_procs }}"
        irods_cfg_re:
          additional_rulebases:
            - cve
            - cyverse_core
            - cyverse_housekeeping
        irods_cfg_restart_allowed: "{{ _irods_restart_allowed }}"
        irods_cfg_rulebases_static:
          - files/irods/etc/irods/*.re
        irods_cfg_rulebases_templated:
          - templates/irods/etc/irods/*.re.j2
        irods_cfg_server_control_plane_key: "{{ _irods_server_control_plane_key }}"
        irods_cfg_server_control_plane_port: "{{ _irods_server_control_plane_port }}"
        irods_cfg_server_port_range_end: "{{ _irods_server_port_range_end }}"
        irods_cfg_server_port_range_start: "{{ _irods_server_port_range_start }}"
        irods_cfg_system_account_name: "{{ _irods_service_account_name }}"
        irods_cfg_system_group_name: "{{ _irods_service_group_name }}"
        irods_cfg_test_log: "{{ _test_log }}"
        irods_cfg_transfer_buffer_size_for_parallel_transfer: >-
          {{ _irods_parallel_transfer_buffer_size }}
        irods_cfg_zone_key: "{{ _irods_zone_key }}"
        irods_cfg_zone_name: "{{ _irods_zone_name }}"
        irods_cfg_zone_password: "{{ _irods_clerver_password }}"
        irods_cfg_zone_port: "{{ _irods_zone_port }}"
        irods_cfg_zone_user: "{{ _irods_clerver_user }}"

    - name: Start iRODS
      cyverse.ds.irods_ctl:
        test_log: "{{ _test_log }}"

    - name: Authenticate clerver
      cyverse.ds.irods_clerver_auth:
        host: "{{ inventory_hostname }}"
        password: "{{ _irods_clerver_password }}"

- name: Perform run-time configuration
  ansible.builtin.import_playbook: irods_runtime_init.yml
