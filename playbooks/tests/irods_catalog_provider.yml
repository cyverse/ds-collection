---
- name: Test allow catalog service providers to talk to DBMS
  hosts: dbms
  become: true
  tasks:
    - name: Test allow communication with Postgres DBMS
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          sed --quiet \
              '/^# BEGIN DS IRODS MANAGED BLOCK$/{
                n;
                / *host \+ICAT \+irods \+[0-9.]\+\/32 \+md5$/!Q1;
                n;
                / *host \+ICAT \+irods \+[0-9.]\+\/32 \+md5$/!Q1;
                n;
                /^# END DS IRODS MANAGED BLOCK$/Q0 };
              $ Q1' \
            /etc/postgresql/12/main/pg_hba.conf
      changed_when: false
      tags: skip_ansible_lint


- name: Test provisioning
  ansible.builtin.import_playbook: irods_provision.yml


- name: Test provision additional for catalog service providers
  hosts: irods_catalog
  become: true
  become_flags: '-i'
  tasks:
    - name: Verify parallel installed
      ansible.builtin.include_tasks: tasks/test_pkg_installed.yml
      vars:
        pkg: parallel

    - name: Verify pika installed
      community.general.pip_package_info:
        clients: pip3
      register: pip_info
      failed_when: >-
        'pika' not in pip_info.packages['pip3']
        or pip_info.packages['pip3']['pika'][0]['version'] is version('1.2', '<')

    - name: Test provision CentOS
      when: ansible_distribution == 'CentOS'
      block:
        - name: CentOS | verify correct packages installed
          ansible.builtin.include_tasks: tasks/test_pkg_installed.yml
          with_items:
            - mailx
            - pgdg-redhat-repo
            - postgresql12
            - postgresql12-odbc
          loop_control:
            loop_var: pkg

        - name: CentOS | verify postgresql clients are on the the path
          ansible.builtin.stat:
            path: "{{ item }}"
          register: resp
          failed_when: >-
            not resp.stat.exists or not resp.stat.rusr or not resp.stat.rgrp or not resp.stat.roth
          with_items:
            - /etc/profile.d/postgres.csh
            - /etc/profile.d/postgres.sh

        - name: CentOS | test correct psql version
          ansible.builtin.assert:
            that: ansible_env.PATH is search('/usr/pgsql-12/bin' | regex_escape)

        - name: CentOS | verify PostgreSQL 12 ODBC driver exists
          ansible.builtin.command: odbcinst -q -d -n PostgreSQL
          changed_when: false

        - name: CentOS | verify irods-database-plugin-postgres locked to required version
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: |
              set -o pipefail
              if ! yum versionlock status | grep --quiet irods-database-plugin-postgres; then
                printf 'irods-database-plugin-postgres not locked\n' >&2
                exit 1
              elif info="$(
                yum --quiet list installed irods-database-plugin-postgres | tail --lines=+2 )"
              then
                readarray -t versions <<< "$info"
                for version in "${versions[@]}"; do
                  read _ verNum _ <<< "$version"
                  if ! [[ "$verNum" =~ 4\.3\.1 ]]; then
                    printf 'found version %s\n' "$verNum" >&2
                    exit 1
                  fi
                done
              fi
          changed_when: false

    - name: Test provision Ubuntu
      when: ansible_distribution == 'Ubuntu'
      block:
        - name: Ubuntu | verify correct packages installed
          ansible.builtin.include_tasks: tasks/test_pkg_installed.yml
          with_items:
            - bsd-mailx
            - odbc-postgresql
            - postgresql-client-12
          loop_control:
            loop_var: pkg

        - name: Ubuntu | verify PostgreSQL signing key installed
          ansible.builtin.command: apt-key list
          register: resp
          changed_when: false
          failed_when: resp.stdout is not regex('PostgreSQL Debian Repository')

        - name: Ubuntu | verify PostgreSQL repository installed
          ansible.builtin.stat:
            path: /etc/apt/sources.list.d/pgdg.list
          register: resp
          failed_when: not resp.stat.exists

        - name: Ubuntu | test lock irods-database-plugin-postgres to required version
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: |
              set -o pipefail
              apt-cache policy | grep --quiet 'irods-database-plugin-postgres -> 4.3.1'
          changed_when: false

    - name: Verify PostgreSQL plugin installed
      ansible.builtin.include_tasks: tasks/test_pkg_installed.yml
      vars:
        pkg: irods-database-plugin-postgres
        version: 4.3.1

    - name: Verify iRODS ownership
      ansible.builtin.include_tasks: tasks/irods/test_irods_ownership.yml
      with_items:
        - /etc/irods
        - /var/lib/irods
      loop_control:
        loop_var: dir


- name: Test rule template expansion
  ansible.builtin.import_playbook: irods_rule_templates.yml


- name: Test common file deposition
  hosts: irods_catalog
  become: true
  become_user: irods
  tasks:
    - name: Check common configuration files in place
      ansible.builtin.stat:
        path: /etc/irods/{{ item }}
      register: response
      failed_when: >-
        not response.stat.exists
        or response.stat.pw_name != 'irods'
        or not response.stat.rusr
      with_items:
        - avra.re
        - avra-env.re
        - coge.re
        - core.dvm
        - core.fnm
        - core.re
        - cve.re
        - cyverse.re
        - cyverse-env.re
        - cyverse_core.re
        - cyverse_housekeeping.re
        - cyverse_json.re
        - cyverse_logic.re
        - ipc-trash.re
        - ipc-encryption.re
        - mdrepo.re
        - mdrepo-env.re
        - pire.re
        - pire-env.re
        - server_config.json
        - service_account.config

    - name: Verify irods_environment.json is in place
      ansible.builtin.stat:
        path: /var/lib/irods/.irods/irods_environment.json
      register: response
      failed_when: not response.stat.exists

    - name: Verify common command scripts are in place
      ansible.builtin.stat:
        path: /var/lib/irods/msiExecCmd_bin/{{ item }}
      register: response
      failed_when: >-
        not response.stat.exists
        or response.stat.pw_name != 'irods'
        or not response.stat.xusr
      loop:
        - amqp-topic-send
        - correct-size
        - delete-scheduled-rule
        - generate-uuid
        - imeta-exec
        - send-mail

    - name: Verify old config do not exist
      ansible.builtin.stat:
        path: /etc/irods/{{ item }}
      register: response
      failed_when: response.stat.exists
      loop:
        - host_access_control_config.json
        - hosts_config.json

    - name: Retrieve encoded irods_environment.json
      ansible.builtin.slurp:
        src: /var/lib/irods/.irods/irods_environment.json
      register: ie_encoded

    - name: Decode irods_environment.json
      ansible.builtin.set_fact:
        irods_environment: "{{ ie_encoded.content | b64decode }}"

    - name: Verify irods_environment.json has correct contents
      ansible.builtin.assert:
        that:
          - irods_environment.irods_host == inventory_hostname
          - irods_environment.irods_port == 1247
          - irods_environment.irods_user_name == 'rods'
          - irods_environment.irods_zone_name == 'testing'
          - irods_environment.irods_client_server_policy == 'CS_NEG_REFUSE'
          - irods_environment.irods_server_control_plane_key == 'TEMPORARY__32byte_ctrl_plane_key'
          - irods_environment.irods_server_control_plane_port == 1248
          - irods_environment.irods_default_hash_scheme == 'MD5'
          - irods_environment.irods_default_resource == 'ingestRes'

    - name: Retrieve encoded server_config.json
      ansible.builtin.slurp:
        src: /etc/irods/server_config.json
      register: sc_encoded

    - name: Decode server_config.json
      ansible.builtin.set_fact:
        server_config: "{{ sc_encoded.content | b64decode }}"

    - name: Verify server_config.json has correct contents
      ansible.builtin.assert:
        that:
          - server_config.advanced_settings.default_number_of_transfer_threads == 4
          - server_config.advanced_settings.number_of_concurrent_delay_rule_executors == 4
          - server_config.advanced_settings.transfer_buffer_size_for_parallel_transfer_in_megabytes == 4
          - server_config.catalog_provider_hosts | length == 1
          - server_config.catalog_provider_hosts[0] == inventory_hostname
          - server_config.catalog_service_role == 'provider'
          - server_config.default_dir_mode == '0750'
          - server_config.default_file_mode == '0600'
          - server_config.default_hash_scheme == 'MD5'
          - server_config.environment_variables.IRODS_DATABASE_USER_PASSWORD_SALT == 'salt'
          - server_config.environment_variables.IRODS_AMQP_URI == "amqp://amqp_admin:password@dstesting-amqp-1.dstesting_default:5672/%2F"
          - server_config.federation | length == 2
          - server_config.federation[0].catalog_provider_hosts | length == 2
          - server_config.federation[0].catalog_provider_hosts[0] == '128.196.65.155'
          - server_config.federation[0].negotiation_key == 'FAKE___32_byte_negotiation_key_1'
          - server_config.federation[0].zone_key == 'FAKE_zone_key_1'
          - server_config.federation[0].zone_name == 'cyverse.dev'
          - server_config.negotiation_key == 'TEMPORARY_32byte_negotiation_key'
          - server_config.plugin_configuration.database.postgres.db_host == 'dstesting-dbms_configured-1.dstesting_default'
          - server_config.plugin_configuration.database.postgres.db_password == 'testpassword'
          - server_config.plugin_configuration.database.postgres.db_port == 5432
          - server_config.plugin_configuration.database.postgres.db_username == 'irods'
          - server_config.plugin_configuration.rule_engines[0].plugin_specific_configuration.re_rulebase_set | length == 4
          - server_config.plugin_configuration.rule_engines[0].plugin_specific_configuration.re_rulebase_set[0] == 'cve'
          - server_config.plugin_configuration.rule_engines[0].plugin_specific_configuration.re_rulebase_set[1] == 'cyverse_core'
          - server_config.plugin_configuration.rule_engines[0].plugin_specific_configuration.re_rulebase_set[2] == 'cyverse_housekeeping'
          - server_config.schema_validation_base_uri == 'file:///var/lib/irods/configuration_schemas'
          - server_config.server_control_plane_key == 'TEMPORARY__32byte_ctrl_plane_key'
          - server_config.server_control_plane_port == 1248
          - server_config.server_port_range_end == 19999
          - server_config.server_port_range_start == 19990
          - server_config.zone_key == 'TEMPORARY_zone_key'
          - server_config.zone_name == 'testing'
          - server_config.zone_port == 1247
          - server_config.zone_user == 'rods'

    - name: Test iRODS running
      ansible.builtin.import_tasks: tasks/irods/test_running.yml

    - name: Verify that clerver auth file exists
      ansible.builtin.stat:
        path: /var/lib/irods/.irods/.irodsA
      register: response
      failed_when: not response.stat.exists or response.stat.pw_name != 'irods'


- name: Test iRODS run-time initialization
  ansible.builtin.import_playbook: irods_runtime_init.yml
