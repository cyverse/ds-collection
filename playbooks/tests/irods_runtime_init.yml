---
- name: Test run-time initialization
  hosts: irods_catalog
  become: true
  become_user: irods
  run_once: true
  tasks:
    - name: Verify that rodsadmin group exists
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: iquest "select USER_GROUP_ID where USER_GROUP_NAME = 'rodsadmin'" > /dev/null
      changed_when: false

    - name: Verify that primary clerver user in rodsadmin group
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          iquest "select USER_ID where USER_GROUP_NAME = 'rodsadmin' and USER_NAME = 'rods'" \
            > /dev/null
      changed_when: false

    - name: Verify that group folders don't exist
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: iquest "select COLL_ID where COLL_NAME = '/testing/{{ item }}'" > /dev/null
      register: response
      changed_when: false
      failed_when: response is succeeded
      loop:
        - home/public
        - home/rodsadmin
        - trash/home/public
        - trash/home/rodsadmin

    - name: Verify /zone/home/shared does exist
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: iquest "select COLL_ID where COLL_NAME = '/testing/home/shared'" > /dev/null
      changed_when: false

    - name: Verify that the starting collections have UUIDs
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          iquest \
              "select META_COLL_ATTR_VALUE
                where META_COLL_ATTR_NAME = 'ipc_UUID' and COLL_NAME = '{{ item }}'" \
            > /dev/null
      loop:
        - /testing
        - /testing/home
        - /testing/home/shared
        - /testing/trash
        - /testing/trash/home
      changed_when: false

    - name: Test ensure CyVerse curated collection base collection exists
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: ils /testing/home/shared/commons_repo/curated
      changed_when: false

    - name: Verify that rodsadmin has write permission on static collections
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          groupId="$(iquest '%s' "select USER_GROUP_ID where USER_GROUP_NAME = 'rodsadmin'")"
          iquest '%s' \
            "select COLL_ACCESS_NAME
              where COLL_NAME = '{{ item }}' and COLL_ACCESS_USER_ID = '$groupId'"
      register: result
      failed_when:
        result.stdout != 'modify_object'
      changed_when: false
      loop:
        - /testing
        - /testing/home
        - /testing/trash
        - /testing/trash/home

    - name: Verify that rodsadmin has own permission on all other collections
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          groupId="$(iquest '%s' "select USER_GROUP_ID where USER_GROUP_NAME = 'rodsadmin'")"
          totColls="$(iquest '%s' "select count(COLL_ID) where COLL_NAME like '{{ item }}/%'")"
          totCollsOwn="$(iquest '%s' \
            "select count(COLL_ID)
              where COLL_NAME like '{{ item }}/%'
                and COLL_ACCESS_USER_ID = '$groupId' and COLL_ACCESS_NAME = 'own'" )"
          (( totColls > 0 && totColls == totCollsOwn ))
      changed_when: false
      loop:
        - /testing/home
        - /testing/trash/home

    - name: Verify that rodsadmin has own permission on all data objects
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          groupId="$(iquest '%s' "select USER_GROUP_ID where USER_GROUP_NAME = 'rodsadmin'")"
          totObjs="$(iquest '%s' "select count(DATA_ID)")"
          totObjsOwn="$(iquest '%s' \
            "select count(DATA_ID)
              where DATA_ACCESS_USER_ID = '$groupId' and DATA_ACCESS_NAME = 'own'" )"
          (( totObjs == totObjsOwn ))
      changed_when: false

    - name: Test ensure anonymous user exists
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: test "$(iadmin lu anonymous)" != 'No rows found'
      changed_when: false

    - name: Verify anonymous user has read access to zone collection
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          ils -A /testing | grep --quiet 'anonymous#testing:read_object'
      changed_when: false

    - name: Verify anonymous user has read access to home collection
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          ils -A /testing/home | grep --quiet 'anonymous#testing:read_object'
      changed_when: false

    - name: Verify anonymous user has read access to public collection
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          ils -A /testing/home/shared | grep --quiet 'anonymous#testing:read_object'
      changed_when: false

    - name: Verify anonymous user has read access to CyVerse curated collection
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          ils -A /testing/home/shared/commons_repo/curated \
            | grep --quiet 'anonymous#testing:read_object'
      changed_when: false

    - name: Test start quota usage computation
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          iqstat -u rods | grep --quiet {{ item }}
      loop:
        - cyverse_housekeeping_updateQuotaUsage
        - cyverse_housekeeping_determineAllStorageFreeSpace
        - cyverse_housekeeping_rmTrash
      changed_when: false

    - name: Verify iRODS admin session exited
      ansible.builtin.stat:
        path: /var/lib/irods/.irods/.a-adm
      register: resp
      failed_when: resp.stat.exists

    - name: Verify that there are no ds-service users
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o errexit
          resp="$(iquest %s "select count(USER_ID) where USER_TYPE = 'ds-service'" )"
          (( resp == 0 ))
      changed_when: false

    - name: Test ensure service user type doesn't exist
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o errexit
          resp="$(iquest %s \
            "select count(TOKEN_ID)
             where TOKEN_NAMESPACE = 'user_type' and TOKEN_NAME = 'ds-service'" )"
          (( resp == 0 ))
      changed_when: false
