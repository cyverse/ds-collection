---
- name: Run-time initialization
  hosts: irods_catalog
  become: "{{ _irods_become_svc_acnt }}"
  become_user: "{{ _irods_service_account_name }}"
  run_once: true
  tasks:
    - name: Ensure public group's home is correct
      become: false
      delegate_to: localhost
      cyverse.ds.irods_move:
        source: /{{ _irods_zone_name }}/home/public
        destination: /{{ _irods_zone_name }}/home/shared
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Ensure public group's trash is correct
      become: false
      delegate_to: localhost
      cyverse.ds.irods_move:
        source: /{{ _irods_zone_name }}/trash/home/public
        destination: /{{ _irods_zone_name }}/trash/home/shared
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Ensure CyVerse curated collection base collection exists
      become: false
      delegate_to: localhost
      cyverse.ds.irods_collection:
        path: /{{ _irods_zone_name }}/home/shared/commons_repo/curated
        parents: true
        state: present
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Ensure predefined collections have UUIDs
      become: false
      delegate_to: localhost
      cyverse.ds.irods_avu:
        entity_type: collection
        entity_name: "{{ item }}"
        attribute: ipc_UUID
        value: "{{ lookup('cyverse.ds.uuid', 1) }}"
        host: "{{ groups['irods_catalog'][0] }}"
        zone: "{{ _irods_zone_name }}"
        username: "{{ _irods_clerver_user }}"
        password: "{{ _irods_clerver_password }}"
      loop:
        - /{{ _irods_zone_name }}
        - /{{ _irods_zone_name }}/home
        - /{{ _irods_zone_name }}/home/{{ _irods_clerver_user }}
        - /{{ _irods_zone_name }}/home/shared
        - /{{ _irods_zone_name }}/trash
        - /{{ _irods_zone_name }}/trash/home
        - /{{ _irods_zone_name }}/trash/home/{{ _irods_clerver_user }}
        - /{{ _irods_zone_name }}/trash/home/shared


    - name: Initialize rodsadmin perms
      when: init_rodsadmin_perms | d(false)
      delegate_to: localhost
      become: false
      block:
        - name: Give rodsadmin group write permission on top-level static collections
          cyverse.ds.irods_permission:
            zone: "{{ _irods_zone_name }}"
            subject: rodsadmin
            permission: write
            object: "{{ item }}"
            host: "{{ groups['irods_catalog'][0] }}"
            port: "{{ _irods_zone_port }}"
            admin_user: "{{ _irods_clerver_user }}"
            admin_password: "{{ _irods_clerver_password }}"
          with_items:
            - /{{ _irods_zone_name }}
            - /{{ _irods_zone_name }}/home
            - /{{ _irods_zone_name }}/trash
            - /{{ _irods_zone_name }}/trash/home

        - name: Give rodsadmin group own permission on home collections
          cyverse.ds.irods_permission:
            zone: "{{ _irods_zone_name }}"
            subject: rodsadmin
            permission: own
            object: "{{ item }}"
            recursion: exclusive
            host: "{{ groups['irods_catalog'][0] }}"
            port: "{{ _irods_zone_port }}"
            admin_user: "{{ _irods_clerver_user }}"
            admin_password: "{{ _irods_clerver_password }}"
          with_items:
            - /{{ _irods_zone_name }}/home
            - /{{ _irods_zone_name }}/trash/home

    - name: Ensure anonymous user exists
      delegate_to: localhost
      become: false
      cyverse.ds.irods_user:
        name: anonymous
        password: ''
        state: present
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"

    - name: Ensure anonymous user has read access to required collections
      delegate_to: localhost
      become: false
      cyverse.ds.irods_permission:
        subject: anonymous
        permission: read
        object: "{{ item }}"
        host: "{{ groups['irods_catalog'][0] }}"
        port: "{{ _irods_zone_port }}"
        admin_user: "{{ _irods_clerver_user }}"
        admin_password: "{{ _irods_clerver_password }}"
        zone: "{{ _irods_zone_name }}"
      with_items:
        - /{{ _irods_zone_name }}
        - /{{ _irods_zone_name }}/home
        - /{{ _irods_zone_name }}/home/shared
        - /{{ _irods_zone_name }}/home/shared/commons_repo/curated

    - name: Start periodic policies
      environment:
        IRODS_AUTHENTICATION_FILE: /var/lib/irods/.irods/.a-adm
        IRODS_USER_NAME: "{{ _irods_admin_username }}"
      block:
        - name: Initialize iRODS admin session
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: iinit
            stdin: "{{ _irods_admin_password }}"
          changed_when: false

        - name: Start quota usage computation
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: |
              irule \
                --rule-engine-plugin-instance=irods_rule_engine_plugin-irods_rule_language-instance \
                cyverse_housekeeping_rescheduleQuotaUsageUpdate null ruleExecOut
          register: results
          changed_when: results.stdout == 'scheduled quota usage updates'

        - name: Start storage free space determination
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: |
              irule \
                --rule-engine-plugin-instance=irods_rule_engine_plugin-irods_rule_language-instance \
                cyverse_housekeeping_rescheduleStorageFreeSpaceDetermination null ruleExecOut
          register: results
          changed_when: results.stdout == 'scheduled storage determination'

        - name: Start trash removal
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: |
              irule \
                --rule-engine-plugin-instance=irods_rule_engine_plugin-irods_rule_language-instance \
                cyverse_housekeeping_rescheduleTrashRemoval null ruleExecOut
          register: results
          changed_when: results.stdout == 'scheduled trash removal'

      always:
        - name: Exit iRODS admin session
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: iexit -f
          changed_when: false

    - name: Find ds-service type users
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o errexit
          resp="$(iquest --no-page %s "select USER_NAME where USER_TYPE = 'ds-service'" )" || true
          if [[ "$resp" =~ ^CAT_NO_ROWS_FOUND ]]; then
            exit 0
          fi
          readarray -t users <<< "$resp"
          for user in "${users[@]}"; do
            iadmin moduser "$user" type rodsuser
            pubResp="$(iquest %s \
              "select count(USER_ID) where USER_GROUP_NAME = 'public' and USER_NAME ='$user'" )"
            if (( pubResp == 0 )); then
              iadmin atg public "$user"
            fi
            for coll \
              in "/{{ _irods_zone_name }}/home/$user" "/{{ _irods_zone_name }}/trash/home/$user"
            do
              if ! ils "$coll"; then
                imkdir "$coll"
                ichmod -M own "$user" "$coll"
                ichmod -M null '{{ _irods_clerver_user }}' "$coll"
              fi
            done
          done > /dev/null
          echo changed
      register: resp
      changed_when: resp.stdout == 'changed'

    - name: Ensure service user type doesn't exist
      cyverse.ds.irods_user_type:
        type: ds-service
        state: absent
