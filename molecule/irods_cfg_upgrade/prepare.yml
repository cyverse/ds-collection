---
- name: Base | prepare
  ansible.builtin.import_playbook: ../_irods_cfg_shared/prepare.yml


- name: Prepare | CentOS upgrade
  hosts: centos.localdomain
  tasks:
    - name: CentOS | install epel repo
      ansible.builtin.package:
        name: epel-release
        state: present

    - name: CentOS | install sudo
      ansible.builtin.package:
        name: sudo
        state: present

    - name: CentOS | install yum_versionlock requirements
      ansible.builtin.package:
        name:
          - yum
          - yum-versionlock
        state: present

    - name: CentOS | install iRODS package repository signing key
      ansible.builtin.rpm_key:
        key: https://packages.irods.org/irods-signing-key.asc

    - name: CentOS | install iRODS repository
      ansible.builtin.get_url:
        url: https://packages.irods.org/renci-irods.yum.repo
        dest: /etc/yum.repos.d/renci-irods.yum.repo
        mode: u+r

    - name: CentOS | force import of GPG key
      ansible.builtin.shell: |
        if ! resp="$(yum --assumeyes updateinfo)"; then
          exit 1
        fi
        if [[ "$resp" =~ irods-signing-key ]]; then
          echo changed
        fi
      register: response
      changed_when: response.stdout == 'changed'

    - name: CentOS | lock irods packages to required version
      community.general.yum_versionlock:
        name:
          - irods-icommands-4.2.8
          - irods-database-plugin-postgres-4.2.8
          - irods-runtime-4.2.8
          - irods-server-4.2.8
        state: present

    - name: CentOS | install OS specific required packages
      ansible.builtin.package:
        name: which
        state: present

      # TODO: When upgrading to iRODS 4.2.9+, remove this task.
    - name: CentOS | ensure unixODBC is installed (irods issue 5389)
      ansible.builtin.package:
        name: unixODBC
        state: present

    - name: CentOS | install PostgreSQL server
      ansible.builtin.package:
        name:
          - postgresql-contrib
          - postgresql-odbc
          - postgresql-server
        state: present

    - name: CentOS | install prerequisites for psycopg2
      ansible.builtin.yum:
        name:
          - "@Development tools"
          - postgresql-devel
          - python3-devel
        state: present


- name: Prepare | CentOS upgrade DBMS
  hosts: centos.localdomain
  become: true
  become_user: postgres
  become_flags: '-i'
  gather_facts: false
  tasks:
    - name: CentOS | initialize PostgreSQL database cluster
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          if [[ -e "$PGDATA" ]] && [[ -z "$(ls --almost-all "$PGDATA")" ]]; then
            initdb --pgdata="$PGDATA" --auth=ident
          fi
      register: response
      changed_when: response.stdout != ''

    - name: CentOS | create PostgreSQL log directory
      ansible.builtin.file:
        path: /var/lib/pgsql/data/pg_log
        state: directory
        mode: u+r

    - name: CentOS | start PostgreSQL
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o errexit
          if ! [[ -e "$PGDATA"/postmaster.pid ]]; then
            pg_ctl start > /dev/null
            echo changed
          fi
      register: response
      changed_when: response.stdout == 'changed'


- name: Prepare | Ubuntu upgrade
  hosts: ubuntu.localdomain
  tasks:
    - name: Ubuntu | install apt_key prerequisites
      ansible.builtin.package:
        name: gpg
        state: present

    - name: Ubuntu | install iRODS package repository signing key
      ansible.builtin.apt_key:
        url: https://packages.irods.org/irods-signing-key.asc

    - name: Ubuntu | install iRODS repository
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/renci-irods.list
        mode: u+rw
        content: |
          deb [arch=amd64] https://packages.irods.org/apt/ {{ ansible_lsb.codename }} main

    - name: Ubuntu | lock iRODS packages to required version
      ansible.builtin.copy:
        dest: /etc/apt/preferences.d/irods
        mode: u+rw
        content: |
          Package: irods-*
          Pin: version 4.2.8
          Pin-Priority: 1001

    - name: Ubuntu | update apt cache
      ansible.builtin.apt:
        update_cache: true

    - name: Ubuntu | install PostgreSQL server
      ansible.builtin.package:
        name: postgresql
        state: present

    - name: Ubuntu | start PostgreSQL
      ansible.builtin.service:
        name: postgresql
        state: started
        enabled: true

    - name: Ubuntu | install prerequisites for psycopg2
      ansible.builtin.package:
        name: libpq-dev
        state: present


- name: Prepare | upgrade
  hosts: all
  gather_facts: false
  tasks:
    - name: Install prerequisites for psycopg2
      ansible.builtin.pip:
        name: wheel

    - name: Install postgresql module prerequisites
      ansible.builtin.pip:
        name:
          - ipaddress
          - psycopg2-binary

    - name: Install iRODS server
      ansible.builtin.package:
        name:
          - irods-database-plugin-postgres
          - irods-server
        state: present


- name: Prepare | upgrade DBMS
  hosts: all
  become: true
  become_user: postgres
  become_flags: '-i'
  gather_facts: false
  tasks:
    - name: Create ICAT DB
      community.postgresql.postgresql_db:
        name: ICAT

    - name: Create iRODS user
      community.postgresql.postgresql_user:
        name: irods
        password: testpassword

    - name: Grant iRODS user full access to ICAT DB
      community.postgresql.postgresql_privs:
        db: postgres
        privs: ALL
        type: database
        obj: ICAT
        roles: irods

    - name: Configure irods user ICAT access
      community.postgresql.postgresql_pg_hba:
        dest: "{{ pg_hba_path }}"
        contype: host
        users: irods
        source: 127.0.0.1/32
        databases: ICAT
        method: md5
        state: present
      notify: Reload postgres, {{ inventory_hostname }}

  handlers:
    - name: Reload postgres, centos.localdomain
      ansible.builtin.command: pg_ctl reload

    - name: Reload postgres, ubuntu.localdomain
      ansible.builtin.service:
        name: postgresql
        state: reloaded


- name: Prepare | upgrade initialize iRODS
  hosts: all
  gather_facts: false
  tasks:
    - name: Determine if ICAT schema initialized
      ansible.builtin.stat:
        path: /var/lib/irods/.odbc.ini
      register: odbc

    - name: Set up iRODS
      when: not odbc.stat.exists
      block:
        - name: Create setup configuration file
          ansible.builtin.copy:
            dest: /tmp/setup_configuration.json
            mode: u+rw
            content: |
              {
                "admin_password": "rods",
                "default_resource_directory": "/var/lib/irods/vault",
                "host_system_information": {
                  "service_account_user_name": "irods",
                  "service_account_group_name": "irods",
                },
                "host_access_control_config": {
                  "access_entries": [],
                  "schema_name": "host_access_control_config",
                  "schema_version": "v3"
                },
                "hosts_config": {
                  "host_entries": [],
                  "schema_name": "hosts_config",
                  "schema_version": "v3"
                },
                "server_config": {
                  "advanced_settings": {
                    "default_number_of_transfer_threads": 4,
                    "default_temporary_password_lifetime_in_seconds": 120,
                    "maximum_number_of_concurrent_rule_engine_server_processes": 4,
                    "maximum_size_for_single_buffer_in_megabytes": 32,
                    "maximum_temporary_password_lifetime_in_seconds": 1000,
                    "rule_engine_server_sleep_time_in_seconds": 30,
                    "transfer_buffer_size_for_parallel_transfer_in_megabytes": 4,
                    "transfer_chunk_size_for_parallel_transfer_in_megabytes": 40
                  },
                  "catalog_provider_hosts": [ "localhost" ],
                  "catalog_service_role": "provider",
                  "default_dir_mode": "0750",
                  "default_file_mode": "0600",
                  "default_hash_scheme": "SHA256",
                  "default_resource_directory": "/var/lib/irods/vault",
                  "default_resource_name": "demoResc",
                  "environment_variables": {},
                  "federation": [],
                  "match_hash_policy": "compatible",
                  "negotiation_key": "TEMPORARY_32byte_negotiation_key",
                  "plugin_configuration": {
                    "authentication": {},
                    "database": {
                      "postgres": {
                        "db_host": "127.0.0.1",
                        "db_name": "ICAT",
                        "db_odbc_driver": "{{ irods_cfg_database.db_odbc_driver }}",
                        "db_password": "testpassword",
                        "db_port": 5432,
                        "db_username": "irods"
                      }
                    },
                    "network": {},
                    "resource": {},
                    "rule_engines": [
                      {
                        "instance_name": "irods_rule_engine_plugin-irods_rule_language-instance",
                        "plugin_name": "irods_rule_engine_plugin-irods_rule_language",
                        "plugin_specific_configuration": {
                          "re_data_variable_mapping_set": [ "core" ],
                          "re_function_name_mapping_set": [ "core" ],
                          "re_rulebase_set": [ "core" ],
                          "regexes_for_supported_peps": [
                              "ac[^ ]*",
                              "msi[^ ]*",
                              "[^ ]*pep_[^ ]*_(pre|post|except|finally)"
                          ]
                        },
                        "shared_memory_instance": "irods_rule_language_rule_engine"
                      },
                      {
                        "instance_name": "irods_rule_engine_plugin-cpp_default_policy-instance",
                        "plugin_name": "irods_rule_engine_plugin-cpp_default_policy",
                        "plugin_specific_configuration": {}
                      }
                    ]
                  },
                  "rule_engine_namespaces": [ "" ],
                  "schema_name": "server_config",
                  "schema_validation_base_uri": "https://schemas.irods.org/configuration",
                  "schema_version": "v3",
                  "server_control_plane_encryption_algorithm": "AES-256-CBC'",
                  "server_control_plane_encryption_num_hash_rounds": 16,
                  "server_control_plane_key": "TEMPORARY__32byte_ctrl_plane_key",
                  "server_control_plane_port": 1248,
                  "server_control_plane_timeout_milliseconds": 10000,
                  "server_port_range_end": 20199,
                  "server_port_range_start": 20000,
                  "xmsg_port": 1279,
                  "zone_auth_scheme": "native",
                  "zone_key": "TEMPORARY_zone_key",
                  "zone_name": "tempZone",
                  "zone_port": 1247,
                  "zone_user": "rods"
                },
                "service_account_environment": {
                  "irods_authentication_file": "/var/lib/irods/.irods/.irodsA",
                  "irods_client_server_negotiation": "request_server_negotiation",
                  "irods_client_server_policy": "CS_NEG_DONT_CARE",
                  "irods_connection_pool_refresh_time_in_seconds": 300,
                  "irods_cwd": "/tempZone/home/rods",
                  "irods_default_hash_scheme": "SHA256",
                  "irods_default_resource": "demoResc",
                  "irods_encryption_algorithm": "AES-256-CBC",
                  "irods_encryption_num_hash_rounds":16,
                  "irods_encryption_key_size": 32,
                  "irods_encryption_salt_size": 8,
                  "irods_home": "/tempZone/home/rods",
                  "irods_host": "{{ inventory_hostname }}",
                  "irods_match_hash_policy": "compatible",
                  "irods_port": 1247,
                  "irods_server_control_plane_encryption_algorithm": "AES-256-CBC",
                  "irods_server_control_plane_encryption_num_hash_rounds": 16,
                  "irods_server_control_plane_key": "TEMPORARY__32byte_ctrl_plane_key",
                  "irods_server_control_plane_port": 1248,
                  "irods_user_name": "rods",
                  "irods_zone_name": "tempZone",
                  "schema_name": "service_account_environment",
                  "schema_version": "v3"
                }
              }

        - name: Initialize ICAT schema
          ansible.builtin.shell:
            executable: /bin/bash
            cmd: |
              set -o errexit
              python /var/lib/irods/scripts/setup_irods.py \
                --json_configuration_file=/tmp/setup_configuration.json
              rm --force /tmp/setup_configuration.json || true
          register: response
          failed_when:
            - not response.stderr is search('Database specified already in use by iRODS')
            - not response.stdout is search('Attempting test put')
          changed_when: not response.stderr is search('Database specified already in use by iRODS')
      rescue:
        - name: Ensure .odbc.ini missing on failure
          ansible.builtin.file:
            path: /var/lib/irods/.odbc.ini
            state: absent

        - name: Fail again
          ansible.builtin.fail:
