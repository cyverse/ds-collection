#!/usr/bin/env bash
#
# Â© 2025 The Arizona Board of Regents on behalf of The University of Arizona.
# For license information, see https://cyverse.org/license.

show_help() {
	cat <<EOF

$ExecName

Usage:
$ExecName [options]

test Data Store playbooks

Options:
 -I, --inventory <inventory>  the name of the inventory hosts file to use
 -P, --playbook <playbook>    the name of the playbook to test
 -S, --setup <playbooks>      a comma-separated list of playbook to be run, in
                              order, prior to the playbook under test
 -h, --help                   show help and exit
 -i, --inspect                after running the playbook, open a shell that
                              allows manual inspection of the configuration
                              files, vaults, and logs
 -p, --pretty                 more information will be output and newlines will
                              be expanded in that output.

Summary:
This script runs a playbook with in the testing environment. If no inventory
hosts file is provided, it will use 'hosts-all'. If no playbook is provided, no
playbook will be run. When combined with -i, this allows the environment to be
started in interactive mode.
EOF
}


set -o errexit -o nounset -o pipefail

ExecName=$(readlink --canonicalize "$0")
TestingDir=$(dirname "$ExecName")
CollectionDir="$(dirname "$TestingDir")"
readonly ExecName TestingDir CollectionDir

readonly Cfg="$TestingDir"/config.inc
readonly PlaybooksDir="$CollectionDir"/playbooks
readonly DefaultHosts=hosts-all


# shellcheck disable=SC1090
source "$Cfg"


main() {
	declare -A opts=(
		[help]=''
		[inspect]=''
		[inventory]="$DefaultHosts"
		[playbook]=''
		[pretty]=''
		[setup]='' )

	if ! resolve_opts opts "$@"
	then
		exit_with_help
	fi

	if [[ -n "${opts[help]}" ]]
	then
		show_help
		return
	fi

	local playbook
	if [[ -n "${opts[playbook]}" ]]
	then
		playbook="$(resolve_playbook "${opts[playbook]}")"
	fi

	local setup
	if [[ -n "${opts[setup]}" ]]
	then
		local books
		IFS=, read -r -a books <<< "${opts[setup]}"

		local book
		for book in "${books[@]}"
		do
			book="$(resolve_playbook "$book")"

			if [[ -n "${setup-}" ]]
			then
				setup="$setup","$book"
			else
				setup="$book"
			fi
		done
	fi

	do_run \
		"${opts[inspect]}" \
		"${opts[pretty]}" \
		"${opts[inventory]}" \
		"${setup-}" \
		"${playbook-}"
}


resolve_opts() {
	local optsVar="$1"
	shift

	local args
	args="$(parse_cmd_line "$@")"
	eval set -- "$args"

	while true
	do
		case "$1" in
			-h|--help)
				eval "$optsVar"[help]=help
				shift 1
				;;
			-I|--inventory-hosts)
				eval "$optsVar""[inventory]='$2'"
				shift 2
				;;
			-i|--inspect)
				eval "$optsVar"[inspect]=inspect
				shift 1
				;;
			-P|--playbook)
				eval "$optsVar""[playbook]='$2'"
				shift 2
				;;
			-p|--pretty)
				eval "$optsVar"'[pretty]=pretty'
				shift 1
				;;
			-S|--setup)
				eval "$optsVar""[setup]='$2'"
				shift 2
				;;
			--)
				shift 1
				break
				;;
		esac
	done
}


do_run() {
	local doInspect="$1"
	local pretty="$2"
	local hosts="$3"
	local setup="$4"
	local playbook="$5"

	"$TestingDir"/env/controller "$Cfg" start

	local rc
	if ! \
		"$TestingDir"/ansible-tester/run \
			"$doInspect" "$pretty" '' "$hosts" "$CollectionDir" "$setup" "$playbook"
	then
		rc=1
	fi

	"$TestingDir"/env/controller "$Cfg" stop
	return ${rc-0}
}


exit_with_help() {
	show_help >&2
	exit 1
}


parse_cmd_line() {
	local opts
	if [[ "$OSTYPE" == "darwin"* ]]
	then
		#shellcheck disable=SC2048,SC2086
		opts="$(getopt hiI:P:pS: $*)"
	else
		opts="$(\
			getopt \
				--longoptions help,inspect,inventory:,playbook:,pretty,setup: \
				--options hiI:P:pS: \
				--name "$ExecName" \
				-- \
				"$@" )"
	fi

	local ret="$?"

	if [ "$ret" -ne 0 ]
	then
		exit_with_help
	fi

	printf '%s' "$opts"
}


resolve_playbook() {
	local playbook="$1"

	if [[ "$playbook" != *.* ]]
	then
		playbook="$playbook".yml
	fi

	if ! [ -f "$PlaybooksDir"/"$playbook" ]
	then
		printf 'The playbook %s does not exist\n' "$playbook" >&2
		exit 1
	fi

	printf '%s' "$playbook"
}


main "$@"
