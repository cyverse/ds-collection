---
- name: Replication | create replication user
  community.postgresql.postgresql_user:
    db: "{{ postgresql_db }}"
    port: "{{ postgresql_listen_port }}"
    name: "{{ postgresql_replication_user }}"
    role_attr_flags: replication
    password: '{{ postgresql_replication_pass }}'
  when: postgresql_downstream_nodes|length > 0
  become: true
  become_user: postgres
  tags: no_testing

- name: Replication | start
  when: postgresql_upstream_node and postgresql_destroy_default_db_on_init
  block:
    - name: Stop database on secondaries
      ansible.builtin.service:
        name: postgresql@12-main.service
        state: stopped
      tags: no_testing

    - name: Ensure pgdata path is empty
      ansible.builtin.file:
        state: absent
        path: "{{ postgresql_db_path }}"
      register: delete_data_response

    - name: Replicate db from primary to secondaries
      when: delete_data_response is changed
      become: true
      become_user: postgres
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          pg_basebackup --progress --write-recovery-conf --no-password \
            --host={{ postgresql_upstream_node }} \
            --user={{ postgresql_replication_user }} \
            --port={{ postgresql_listen_port }} \
            --pgdata={{ postgresql_db_path }} \
            --format=plain \
            --wal-method=stream
      changed_when: true
      tags: skip_ansible_lint

    - name: Create standby.signal files on secondary postgres nodes
      ansible.builtin.copy:
        content: ""
        dest: "{{ postgresql_db_path }}/standby.signal"
        force: false
        group: postgres
        owner: postgres
        mode: 0600

    - name: Start database on secondaries
      ansible.builtin.service:
        name: postgresql@12-main.service
        state: started
      tags: no_testing
